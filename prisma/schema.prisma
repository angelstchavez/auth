generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String   @unique
  password  String
  status    Boolean  @default(true)
  image     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  accounts Account[]
  roles    UserRole[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model RoleDefinition {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users   UserRole[]
  modules RoleAccessModule[]

  @@map("role_definitions")
}

model UserRole {
  userId     String
  roleId     String
  assignedAt DateTime @default(now())

  user User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  role RoleDefinition @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@map("user_roles")
}

model AccessModule {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles RoleAccessModule[]

  @@map("access_modules")
}

model RoleAccessModule {
  roleId   String
  moduleId String

  role   RoleDefinition @relation(fields: [roleId], references: [id], onDelete: Cascade)
  module AccessModule   @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@id([roleId, moduleId])
  @@map("role_access_modules")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
